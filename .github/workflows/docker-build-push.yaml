name: Docker Build and Push + Security Checks

on:
  repository_dispatch:
    types: [docker-build-push, security-checks]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.client_payload.event_type == 'docker-build-push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Variables from Event Payload
        run: |
          echo "IMAGE_NAME=${{ github.event.client_payload.image_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.client_payload.image_tag }}" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Print Docker Image URL
        run: |
          echo "Docker image pushed: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

  security-checks:
    runs-on: ubuntu-latest
    if: github.event.client_payload.event_type == 'security-checks'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract Variables from Event Payload
        run: |
          echo "IMAGE_NAME=${{ github.event.client_payload.image_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.client_payload.image_tag }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ github.token }}" >> $GITHUB_ENV

      - name: Pull Docker Image for Scanning
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Install Hadolint
        run: |
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o /usr/local/bin/gitleaks
          chmod +x /usr/local/bin/gitleaks
      
      - name: Run Gitleaks
        run: |
          gitleaks detect --source . --report-format json --report-path gitleaks_report.json || true

      - name: Run Hadolint
        run: |
          hadolint Dockerfile > hadolint_report.txt || true

      - name: Scan with Grype
        run: |
          grype docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o json > grype_report.json || true

      - name: Generate SBOM with Syft
        run: |
          syft docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o json > sbom.json || true

      - name: Vulnerability Scan with Trivy
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          format: "json"
          output: "trivy_report.json"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Combine Reports
        run: |
          echo "Security Report - $(date)" > security_report.txt
      
          echo -e "\n--- Hadolint ---" >> security_report.txt
          if [ -s hadolint_report.txt ]; then
            cat hadolint_report.txt >> security_report.txt
          else
            echo "No Hadolint output found or file is empty." >> security_report.txt
          fi
      
          echo -e "\n--- Grype ---" >> security_report.txt
          if [ -s grype_report.json ]; then
            jq '.' grype_report.json >> security_report.txt 2>/dev/null || cat grype_report.json >> security_report.txt
          else
            echo "No Grype output found or file is empty." >> security_report.txt
          fi
      
          echo -e "\n--- Syft (SBOM) ---" >> security_report.txt
          if [ -s sbom.json ]; then
            jq '.' sbom.json >> security_report.txt 2>/dev/null || cat sbom.json >> security_report.txt
          else
            echo "No SBOM output found or file is empty." >> security_report.txt
          fi
      
          echo -e "\n--- Trivy ---" >> security_report.txt
          if [ -s trivy_report.json ]; then
            jq '.' trivy_report.json >> security_report.txt 2>/dev/null || cat trivy_report.json >> security_report.txt
          else
            echo "No Trivy output found or file is empty." >> security_report.txt
          fi
      
          echo -e "\n--- Gitleaks ---" >> security_report.txt
          if [ -s gitleaks_report.json ]; then
            jq '.' gitleaks_report.json >> security_report.txt 2>/dev/null || cat gitleaks_report.json >> security_report.txt
          else
            echo "No Gitleaks output found or file is empty." >> security_report.txt
          fi
          
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          name: security_report
          path: security_report.txt
